<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="G_V,;,H^yf,/8#EtGbbX" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="3|MwA4_p%$%h4w_0;Byz" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MiBit {" line1="" line2="    const PCA9685_ADD = 0x41" line3="    const MODE1 = 0x00" line4="    const MODE2 = 0x01" line5="    const SUBADR1 = 0x02" line6="    const SUBADR2 = 0x03" line7="    const SUBADR3 = 0x04" line8="" line9="    const LED0_ON_L = 0x06" line10="    const LED0_ON_H = 0x07" line11="    const LED0_OFF_L = 0x08" line12="    const LED0_OFF_H = 0x09" line13="" line14="    const ALL_LED_ON_L = 0xFA" line15="    const ALL_LED_ON_H = 0xFB" line16="    const ALL_LED_OFF_L = 0xFC" line17="    const ALL_LED_OFF_H = 0xFD" line18="" line19="    const PRESCALE = 0xFE" line20="" line21="    let initialized = false" line22="    let yahStrip: neopixel.Strip;" line23="" line24="    export enum enColor {" line25="" line26="        //% blockId=&quot;OFF&quot; block=&quot;OFF&quot;" line27="        OFF = 0," line28="        //% blockId=&quot;Red&quot; block=&quot;Red&quot;" line29="        Red," line30="        //% blockId=&quot;Green&quot; block=&quot;Green&quot;" line31="        Green," line32="        //% blockId=&quot;Blue&quot; block=&quot;Blue&quot;" line33="        Blue," line34="        //% blockId=&quot;White&quot; block=&quot;White&quot;" line35="        White," line36="        //% blockId=&quot;Cyan&quot; block=&quot;Cyan&quot;" line37="        Cyan," line38="        //% blockId=&quot;Pinkish&quot; block=&quot;Pinkish&quot;" line39="        Pinkish," line40="        //% blockId=&quot;Yellow&quot; block=&quot;Yellow&quot;" line41="        Yellow," line42="" line43="    }" line44="    export enum enMusic {" line45="" line46="        dadadum = 0," line47="        entertainer," line48="        prelude," line49="        ode," line50="        nyan," line51="        ringtone," line52="        funk," line53="        blues," line54="" line55="        birthday," line56="        wedding," line57="        funereal," line58="        punchline," line59="        baddy," line60="        chase," line61="        ba_ding," line62="        wawawawaa," line63="        jump_up," line64="        jump_down," line65="        power_up," line66="        power_down" line67="    }" line68="    export enum enPos {" line69="" line70="        //% blockId=&quot;LeftState&quot; block=&quot;LeftState&quot;" line71="        LeftState = 0," line72="        //% blockId=&quot;RightState&quot; block=&quot;RightState&quot;" line73="        RightState = 1" line74="    }" line75="" line76="    export enum enLineState {" line77="        //% blockId=&quot;White&quot; block=&quot;White Line&quot;" line78="        White = 1," line79="        //% blockId=&quot;Black&quot; block=&quot;Black Line&quot;" line80="        Black = 0" line81="    }" line82="      " line83="    export enum enAvoidState {" line84="        //% blockId=&quot;OBSTACLE&quot; block=&quot;Obstacle&quot;" line85="        OBSTACLE = 1," line86="        //% blockId=&quot;NOOBSTACLE&quot; block=&quot;No Obstacle&quot;" line87="        NOOBSTACLE = 0" line88="" line89="    }" line90="    " line91="    export enum enServo {" line92="        " line93="        S1 = 1," line94="        S2," line95="        S3" line96="    }" line97="    export enum CarState {" line98="        //% blockId=&quot;Car_Run&quot; block=&quot;Run&quot;" line99="        Car_Run = 1," line100="        //% blockId=&quot;Car_Back&quot; block=&quot;Back&quot;" line101="        Car_Back = 2," line102="        //% blockId=&quot;Car_Left&quot; block=&quot;Left&quot;" line103="        Car_Left = 3," line104="        //% blockId=&quot;Car_Right&quot; block=&quot;Right&quot;" line105="        Car_Right = 4," line106="        //% blockId=&quot;Car_Stop&quot; block=&quot;Stop&quot;" line107="        Car_Stop = 5," line108="        //% blockId=&quot;Car_SpinLeft&quot; block=&quot;SpinLeft&quot;" line109="        Car_SpinLeft = 6," line110="        //% blockId=&quot;Car_SpinRight&quot; block=&quot;SpinRight&quot;" line111="        Car_SpinRight = 7" line112="    }" line113="    export enum AloneState {" line114="        //% blockId=&quot;Right_F_Motor&quot; block=&quot;Right motor forward&quot;" line115="        Right_F_Motor = 1," line116="        //% blockId=&quot;Right_B_Motor&quot; block=&quot;Right motor back&quot;" line117="        Right_B_Motor = 2," line118="        //% blockId=&quot;Left_F_Motor&quot; block=&quot;Left motor forward&quot;" line119="        Left_F_Motor = 3," line120="        //% blockId=&quot;Left_B_Motor&quot; block=&quot;Left motor back&quot;" line121="        Left_B_Motor = 4" line122="    }" line123="" line124="    function i2cwrite(addr: number, reg: number, value: number) {" line125="        let buf = pins.createBuffer(2)" line126="        buf[0] = reg" line127="        buf[1] = value" line128="        pins.i2cWriteBuffer(addr, buf)" line129="    }" line130="" line131="    function i2ccmd(addr: number, value: number) {" line132="        let buf2 = pins.createBuffer(1)" line133="        buf2[0] = value" line134="        pins.i2cWriteBuffer(addr, buf2)" line135="    }" line136="" line137="    function i2cread(addr: number, reg: number) {" line138="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line139="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line140="        return val;" line141="    }" line142="" line143="    function initPCA9685(): void {" line144="        i2cwrite(PCA9685_ADD, MODE1, 0x00)" line145="        setFreq(50);" line146="        initialized = true" line147="    }" line148="" line149="    function setFreq(freq: number): void {" line150="        // Constrain the frequency" line151="        let prescaleval = 25000000;" line152="        prescaleval /= 4096;" line153="        prescaleval /= freq;" line154="        prescaleval -= 1;" line155="        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);" line156="        let oldmode = i2cread(PCA9685_ADD, MODE1);" line157="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line158="        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep" line159="        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler" line160="        i2cwrite(PCA9685_ADD, MODE1, oldmode);" line161="        control.waitMicros(5000);" line162="        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);" line163="    }" line164="" line165="    function setPwm(channel: number, on: number, off: number): void {" line166="        if (channel &lt; 0 || channel &gt; 15)" line167="            return;" line168="        if (!initialized) {" line169="            initPCA9685();" line170="        }" line171="        let buf3 = pins.createBuffer(5);" line172="        buf3[0] = LED0_ON_L + 4 * channel;" line173="        buf3[1] = on &amp; 0xff;" line174="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;" line175="        buf3[3] = off &amp; 0xff;" line176="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;" line177="        pins.i2cWriteBuffer(PCA9685_ADD, buf3);" line178="    }" line179="" line180="   function Left_F_run(speed: number) {" line181="" line182="        speed = speed * 16; // map 350 to 4096" line183="        if (speed &gt;= 4096) {" line184="            speed = 4095" line185="        }" line186="        if (speed &lt;= 350) {" line187="            speed = 350" line188="        }" line189="" line190="        setPwm(15, 0, speed);" line191="        setPwm(14, 0, 0);" line192="" line193="        //setPwm(12, 0, 0);" line194="        //setPwm(13, 0, 0);" line195="    }" line196="   function Left_B_run(speed: number) {" line197="" line198="        speed = speed * 16; // map 350 to 4096" line199="        if (speed &gt;= 4096) {" line200="            speed = 4095" line201="        }" line202="        if (speed &lt;= 350) {" line203="            speed = 350" line204="        }" line205="" line206="        setPwm(15, 0, 0);" line207="        setPwm(14, 0, speed);" line208="" line209="        //setPwm(12, 0, 0);" line210="        //setPwm(13, 0, 0);" line211="    }    " line212="     function Right_F_run(speed: number) {" line213="" line214="        speed = speed * 16; // map 350 to 4096" line215="        if (speed &gt;= 4096) {" line216="            speed = 4095" line217="        }" line218="        if (speed &lt;= 350) {" line219="            speed = 350" line220="        }" line221="" line222="       // setPwm(15, 0, 0);" line223="       // setPwm(14, 0, 0);" line224="" line225="        setPwm(12, 0, speed);" line226="        setPwm(13, 0, 0);" line227="    }" line228="     function Right_B_run(speed: number) {" line229="" line230="        speed = speed * 16; // map 350 to 4096" line231="        if (speed &gt;= 4096) {" line232="            speed = 4095" line233="        }" line234="        if (speed &lt;= 350) {" line235="            speed = 350" line236="        }" line237="" line238="       // setPwm(15, 0, 0);" line239="       // setPwm(14, 0, 0);" line240="" line241="        setPwm(12, 0, 0);" line242="        setPwm(13, 0, speed);" line243="    }    " line244="" line245="    function Car_run(speed1: number, speed2: number) {" line246="" line247="        speed1 = speed1 * 16; // map 350 to 4096" line248="        speed2 = speed2 * 16;" line249="        if (speed1 &gt;= 4096) {" line250="            speed1 = 4095" line251="        }" line252="        if (speed1 &lt;= 350) {" line253="            speed1 = 350" line254="        }" line255="        if (speed2 &gt;= 4096) {" line256="            speed2 = 4095" line257="        }" line258="        if (speed2 &lt;= 350) {" line259="            speed2 = 350" line260="        }" line261="" line262="        setPwm(15, 0, speed1);" line263="        setPwm(14, 0, 0);" line264="" line265="        setPwm(12, 0, speed2);" line266="        setPwm(13, 0, 0);" line267="        //pins.digitalWritePin(DigitalPin.P16, 1);" line268="       // pins.analogWritePin(AnalogPin.P1, 1023-speed); //速度控制" line269="" line270="       // pins.analogWritePin(AnalogPin.P0, speed);//速度控制" line271="       // pins.digitalWritePin(DigitalPin.P8, 0);" line272="    }" line273="" line274="    function Car_back(speed1: number, speed2: number) {" line275="" line276="        speed1 = speed1 * 16; // map 350 to 4096" line277="        speed2 = speed2 * 16;" line278="        if (speed1 &gt;= 4096) {" line279="            speed1 = 4095" line280="        }" line281="        if (speed1 &lt;= 350) {" line282="            speed1 = 350" line283="        }" line284="        if (speed2 &gt;= 4096) {" line285="            speed2 = 4095" line286="        }" line287="        if (speed2 &lt;= 350) {" line288="            speed2 = 350" line289="        }" line290="" line291="        setPwm(15, 0, 0);" line292="        setPwm(14, 0, speed1);" line293="" line294="        setPwm(12, 0, 0);" line295="        setPwm(13, 0, speed2);" line296="" line297="        //pins.digitalWritePin(DigitalPin.P16, 0);" line298="        //pins.analogWritePin(AnalogPin.P1, speed); //速度控制" line299="" line300="        //pins.analogWritePin(AnalogPin.P0, 1023 - speed);//速度控制" line301="        //pins.digitalWritePin(DigitalPin.P8, 1);" line302="    }" line303="" line304="    function Car_left(speed1: number, speed2: number) {" line305="" line306="        speed1 = speed1 * 16; // map 350 to 4096" line307="        speed2 = speed2 * 16;" line308="        if (speed1 &gt;= 4096) {" line309="            speed1 = 4095" line310="        }" line311="        if (speed1 &lt;= 350) {" line312="            speed1 = 350" line313="        }" line314="        if (speed2 &gt;= 4096) {" line315="            speed2 = 4095" line316="        }" line317="        if (speed2 &lt;= 350) {" line318="            speed2 = 350" line319="        }" line320="        " line321="        setPwm(15, 0, 0);" line322="        setPwm(14, 0, 0);" line323="" line324="        setPwm(12, 0, speed2);" line325="        setPwm(13, 0, 0);" line326="" line327="        //pins.analogWritePin(AnalogPin.P0, speed);" line328="        //pins.digitalWritePin(DigitalPin.P8, 0);" line329="" line330="        //pins.digitalWritePin(DigitalPin.P16, 0);" line331="        //pins.digitalWritePin(DigitalPin.P1, 0);" line332="    }" line333="" line334="    function Car_right(speed1: number, speed2: number) {" line335="" line336="        speed1 = speed1 * 16; // map 350 to 4096" line337="        speed2 = speed2 * 16;" line338="        if (speed1 &gt;= 4096) {" line339="            speed1 = 4095" line340="        }" line341="        if (speed1 &lt;= 350) {" line342="            speed1 = 350" line343="        }" line344="        if (speed2 &gt;= 4096) {" line345="            speed2 = 4095" line346="        }" line347="        if (speed2 &lt;= 350) {" line348="            speed2 = 350" line349="        }" line350="        " line351="        setPwm(15, 0, speed1);" line352="        setPwm(14, 0, 0);" line353="" line354="        setPwm(12, 0, 0);" line355="        setPwm(13, 0, 0);" line356="        //pins.digitalWritePin(DigitalPin.P0, 0);" line357="        //pins.digitalWritePin(DigitalPin.P8, 0);" line358="" line359="        //pins.digitalWritePin(DigitalPin.P16, 1);" line360="       // pins.analogWritePin(AnalogPin.P1, 1023 - speed);" line361="    }" line362="" line363="    function Car_stop() {" line364="       " line365="        setPwm(15, 0, 0);" line366="        setPwm(14, 0, 0);" line367="" line368="        setPwm(12, 0, 0);" line369="        setPwm(13, 0, 0);" line370="        //pins.digitalWritePin(DigitalPin.P0, 0);" line371="        //pins.digitalWritePin(DigitalPin.P8, 0);" line372="        //pins.digitalWritePin(DigitalPin.P16, 0);" line373="        //pins.digitalWritePin(DigitalPin.P1, 0);" line374="    }" line375="" line376="    function Car_spinleft(speed1: number, speed2: number) {" line377="" line378="        speed1 = speed1 * 16; // map 350 to 4096" line379="        speed2 = speed2 * 16;" line380="        if (speed1 &gt;= 4096) {" line381="            speed1 = 4095" line382="        }" line383="        if (speed1 &lt;= 350) {" line384="            speed1 = 350" line385="        }" line386="        if (speed2 &gt;= 4096) {" line387="            speed2 = 4095" line388="        }" line389="        if (speed2 &lt;= 350) {" line390="            speed2 = 350" line391="        }        " line392="        " line393="        setPwm(15, 0, 0);" line394="        setPwm(14, 0, speed1);" line395="" line396="        setPwm(12, 0, speed2);" line397="        setPwm(13, 0, 0);" line398="" line399="        //pins.analogWritePin(AnalogPin.P0, speed);" line400="        //pins.digitalWritePin(DigitalPin.P8, 0);" line401="" line402="        //pins.digitalWritePin(DigitalPin.P16, 0);" line403="        //pins.analogWritePin(AnalogPin.P1, speed);" line404="    } " line405="" line406="    function Car_spinright(speed1: number, speed2: number) {" line407="" line408="        speed1 = speed1 * 16; // map 350 to 4096" line409="        speed2 = speed2 * 16;" line410="        if (speed1 &gt;= 4096) {" line411="            speed1 = 4095" line412="        }" line413="        if (speed1 &lt;= 350) {" line414="            speed1 = 350" line415="        }" line416="        if (speed2 &gt;= 4096) {" line417="            speed2 = 4095" line418="        }" line419="        if (speed2 &lt;= 350) {" line420="            speed2 = 350" line421="        }    " line422="            " line423="        setPwm(15, 0, speed1);" line424="        setPwm(14, 0, 0);" line425="" line426="        setPwm(12, 0, 0);" line427="        setPwm(13, 0, speed2);" line428="        //pins.analogWritePin(AnalogPin.P0, 1023-speed);" line429="        //pins.digitalWritePin(DigitalPin.P8, 1);" line430="" line431="        //pins.digitalWritePin(DigitalPin.P16, 1);" line432="        //pins.analogWritePin(AnalogPin.P1, 1023-speed);" line433="" line434="    }" line435="" line436="    /**" line437="     * *****************************************************************" line438="     * @param index" line439="     */" line440="    //% blockId=MiBit_RGB_Car_Big2 block=&quot;RGB car LED|select LED color %value&quot;" line441="    //% weight=101" line442="    //% blockGap=10" line443="    //% color=&quot;#87CEEB&quot;" line444="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line445="    export function RGB_Car_Big2(value: enColor): void {" line446="" line447="        switch (value) {" line448="            case enColor.OFF: {" line449="                setPwm(0, 0, 0);" line450="                setPwm(1, 0, 0);" line451="                setPwm(2, 0, 0);" line452="                break;" line453="            }" line454="            case enColor.Red: {" line455="                setPwm(0, 0, 4095);" line456="                setPwm(1, 0, 0);" line457="                setPwm(2, 0, 0);" line458="                break;" line459="            }" line460="            case enColor.Green: {" line461="                setPwm(0, 0, 0);" line462="                setPwm(1, 0, 4095);" line463="                setPwm(2, 0, 0);" line464="                break;" line465="            }" line466="            case enColor.Blue: {" line467="                setPwm(0, 0, 0);" line468="                setPwm(1, 0, 0);" line469="                setPwm(2, 0, 4095);" line470="                break;" line471="            }" line472="            case enColor.White: {" line473="                setPwm(0, 0, 4095);" line474="                setPwm(1, 0, 4095);" line475="                setPwm(2, 0, 4095);" line476="                break;" line477="            }" line478="            case enColor.Cyan: {" line479="                setPwm(0, 0, 0);" line480="                setPwm(1, 0, 4095);" line481="                setPwm(2, 0, 4095);" line482="                break;" line483="            }" line484="            case enColor.Pinkish: {" line485="                setPwm(0, 0, 4095);" line486="                setPwm(1, 0, 0);" line487="                setPwm(2, 0, 4095);" line488="                break;" line489="            }" line490="            case enColor.Yellow: {" line491="                setPwm(0, 0, 4095);" line492="                setPwm(1, 0, 4095);" line493="                setPwm(2, 0, 0);" line494="                break;" line495="            }" line496="        }" line497="    }" line498="    //% blockId=MiBit_RGB_Car_Big block=&quot;RGB car LED|red %value1|green %value2|blue %value3&quot;" line499="    //% weight=100" line500="    //% blockGap=10" line501="    //% color=&quot;#87CEEB&quot;" line502="    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255" line503="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line504="    export function RGB_Car_Big(value1: number, value2: number, value3: number): void {" line505="" line506="        let R = value1 * 16;" line507="        let G = value2 * 16;" line508="        let B = value3 * 16;" line509="" line510="        if (R &gt; 4096)" line511="            R = 4095;" line512="        if (G &gt; 4096)" line513="            G = 4095;" line514="        if (B &gt; 4096)" line515="            B = 4095;" line516="" line517="        setPwm(0, 0, R);" line518="        setPwm(1, 0, G);" line519="        setPwm(2, 0, B);" line520="" line521="    }" line522="" line523="    /**" line524="     * *****************************************************************" line525="     * @param index" line526="     */   " line527="" line528="    //% blockId=MiBit_RGB_Car_Program block=&quot;RGB_Car_Program&quot;" line529="    //% weight=99" line530="    //% blockGap=10" line531="    //% color=&quot;#87CEEB&quot;" line532="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line533="    export function RGB_Car_Program(): neopixel.Strip {" line534="         " line535="        if (!yahStrip) {" line536="            yahStrip = neopixel.create(DigitalPin.P16, 4, NeoPixelMode.RGB);" line537="        }" line538="        return yahStrip;  " line539="    }  " line540="    " line541="    " line542="    //% blockId=MiBit_Music_Car block=&quot;Music_Car|%index&quot;" line543="    //% weight=95" line544="    //% blockGap=10" line545="    //% color=&quot;#87CEEB&quot;" line546="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line547="    export function Music_Car(index: enMusic): void {" line548="        switch (index) {" line549="            case enMusic.dadadum: music.beginMelody(music.builtInMelody(Melodies.Dadadadum), MelodyOptions.Once); break;" line550="            case enMusic.birthday: music.beginMelody(music.builtInMelody(Melodies.Birthday), MelodyOptions.Once); break;" line551="            case enMusic.entertainer: music.beginMelody(music.builtInMelody(Melodies.Entertainer), MelodyOptions.Once); break;" line552="            case enMusic.prelude: music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.Once); break;" line553="            case enMusic.ode: music.beginMelody(music.builtInMelody(Melodies.Ode), MelodyOptions.Once); break;" line554="            case enMusic.nyan: music.beginMelody(music.builtInMelody(Melodies.Nyan), MelodyOptions.Once); break;" line555="            case enMusic.ringtone: music.beginMelody(music.builtInMelody(Melodies.Ringtone), MelodyOptions.Once); break;" line556="            case enMusic.funk: music.beginMelody(music.builtInMelody(Melodies.Funk), MelodyOptions.Once); break;" line557="            case enMusic.blues: music.beginMelody(music.builtInMelody(Melodies.Blues), MelodyOptions.Once); break;" line558="            case enMusic.wedding: music.beginMelody(music.builtInMelody(Melodies.Wedding), MelodyOptions.Once); break;" line559="            case enMusic.funereal: music.beginMelody(music.builtInMelody(Melodies.Funeral), MelodyOptions.Once); break;" line560="            case enMusic.punchline: music.beginMelody(music.builtInMelody(Melodies.Punchline), MelodyOptions.Once); break;" line561="            case enMusic.baddy: music.beginMelody(music.builtInMelody(Melodies.Baddy), MelodyOptions.Once); break;" line562="            case enMusic.chase: music.beginMelody(music.builtInMelody(Melodies.Chase), MelodyOptions.Once); break;" line563="            case enMusic.ba_ding: music.beginMelody(music.builtInMelody(Melodies.BaDing), MelodyOptions.Once); break;" line564="            case enMusic.wawawawaa: music.beginMelody(music.builtInMelody(Melodies.Wawawawaa), MelodyOptions.Once); break;" line565="            case enMusic.jump_up: music.beginMelody(music.builtInMelody(Melodies.JumpUp), MelodyOptions.Once); break;" line566="            case enMusic.jump_down: music.beginMelody(music.builtInMelody(Melodies.JumpDown), MelodyOptions.Once); break;" line567="            case enMusic.power_up: music.beginMelody(music.builtInMelody(Melodies.PowerUp), MelodyOptions.Once); break;" line568="            case enMusic.power_down: music.beginMelody(music.builtInMelody(Melodies.PowerDown), MelodyOptions.Once); break;" line569="        }" line570="    }" line571="    " line572="    //% blockId=MiBit_Servo_Car block=&quot;Servo_Car|num %num|value %value&quot;" line573="    //% weight=94" line574="    //% blockGap=10" line575="    //% color=&quot;#87CEEB&quot;" line576="    //% num.min=1 num.max=4 value.min=0 value.max=180" line577="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=9" line578="    export function Servo_Car(num: enServo, value: number): void {" line579="" line580="        // 50hz: 20,000 us" line581="        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4" line582="        let pwm = us * 4096 / 20000;" line583="        setPwm(num + 2, 0, pwm);" line584="" line585="    }" line586="    " line587="    //% blockId=MiBit_CarCtrl block=&quot;CarCtrl|%index&quot;" line588="    //% weight=93" line589="    //% blockGap=10" line590="    //% color=&quot;#87CEEB&quot;" line591="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=10" line592="    export function CarCtrl(index: CarState): void {" line593="        switch (index) {" line594="            case CarState.Car_Run: Car_run(255, 255); break;" line595="            case CarState.Car_Back: Car_back(255, 255); break;" line596="            case CarState.Car_Left: Car_left(255, 255); break;" line597="            case CarState.Car_Right: Car_right(255, 255); break;" line598="            case CarState.Car_Stop: Car_stop(); break;" line599="            case CarState.Car_SpinLeft: Car_spinleft(255, 255); break;" line600="            case CarState.Car_SpinRight: Car_spinright(255, 255); break;" line601="        }" line602="    }" line603="    " line604="    //% blockId=MiBit_CarCtrlSpeed block=&quot;CarCtrlSpeed|%index|speed %speed&quot;" line605="    //% weight=92" line606="    //% blockGap=10" line607="    //% speed.min=0 speed.max=255" line608="    //% color=&quot;#87CEEB&quot;" line609="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=10" line610="    export function CarCtrlSpeed(index: CarState, speed: number): void {" line611="        switch (index) {" line612="            case CarState.Car_Run: Car_run(speed, speed); break;" line613="            case CarState.Car_Back: Car_back(speed, speed); break;" line614="            case CarState.Car_Left: Car_left(speed, speed); break;" line615="            case CarState.Car_Right: Car_right(speed, speed); break;" line616="            case CarState.Car_Stop: Car_stop(); break;" line617="            case CarState.Car_SpinLeft: Car_spinleft(speed, speed); break;" line618="            case CarState.Car_SpinRight: Car_spinright(speed, speed); break;" line619="        }" line620="    }" line621="    " line622="    //% blockId=MiBit_AloneCtrlSpeed block=&quot;AloneCtrlSpeed|%index|speed %speed&quot;" line623="    //% weight=91" line624="    //% blockGap=10" line625="    //% speed.min=0 speed.max=255" line626="    //% color=&quot;#87CEEB&quot;" line627="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=10" line628="    export function AloneCtrlSpeed(index: AloneState, speed: number): void {" line629="        switch (index) {" line630="            case AloneState.Right_F_Motor: Left_B_run(speed); break;" line631="            case AloneState.Right_B_Motor: Left_F_run(speed); break;" line632="            case AloneState.Left_F_Motor: Right_B_run(speed); break;" line633="            case AloneState.Left_B_Motor: Right_F_run(speed); break;" line634="        }" line635="    }     " line636="        " line637="    " line638="    //% blockId=MiBit_Line_Sensor block=&quot;Line_Sensor|direct %direct|value %value&quot;" line639="    //% weight=89" line640="    //% blockGap=10" line641="    //% color=&quot;#87CEEB&quot;" line642="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=12" line643="    export function Line_Sensor(direct: enPos, value: enLineState): boolean {" line644="" line645="        let temp: boolean = false;" line646="" line647="        switch (direct) {" line648="            case enPos.LeftState: {" line649="                if (pins.analogReadPin(AnalogPin.P1) &lt; 500) {" line650="                    if (value == enLineState.White) {" line651="                        temp = true;" line652="                    }" line653="                    setPwm(7, 0, 4095);" line654="                }" line655="                else {" line656="                    if (value == enLineState.Black) {" line657="                        temp = true;" line658="                    }" line659="                    setPwm(7, 0, 0);" line660="                }" line661="                break;" line662="            }" line663="" line664="            case enPos.RightState: {" line665="                if (pins.analogReadPin(AnalogPin.P2) &lt; 500) {" line666="                    if (value == enLineState.White) {" line667="                        temp = true;" line668="                    }" line669="                    setPwm(6, 0, 4095);" line670="                }" line671="                else {" line672="                    if (value == enLineState.Black) {" line673="                        temp = true;" line674="                    }" line675="                    setPwm(6, 0, 0);" line676="                }" line677="                break;" line678="            }" line679="        }" line680="        return temp;" line681="" line682="    }" line683="        " line684="    //% blockId=MiBit_ultrasonic_car block=&quot;ultrasonic return distance(cm)&quot;" line685="    //% color=&quot;#87CEEB&quot;" line686="    //% weight=88" line687="    //% blockGap=10" line688="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line689="    export function Ultrasonic_Car(): number {" line690="" line691="        // send pulse       " line692="        pins.setPull(DigitalPin.P14, PinPullMode.PullNone);" line693="        pins.digitalWritePin(DigitalPin.P14, 0);" line694="        control.waitMicros(2);" line695="        pins.digitalWritePin(DigitalPin.P14, 1);" line696="        control.waitMicros(10);" line697="        pins.digitalWritePin(DigitalPin.P14, 0);" line698="" line699="        // read pulse" line700="        const d = pins.pulseIn(DigitalPin.P15, PulseValue.High, 500 * 58);" line701="        return Math.idiv(d, 58);" line702="    }" line703="" line704="    //% blockId=MiBit_Avoid_Sensor block=&quot;Avoid_Sensor|direct %direct|value %value&quot;" line705="    //% weight=87" line706="    //% blockGap=10" line707="    //% color=&quot;#87CEEB&quot;" line708="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=12" line709="    export function Avoid_Sensor(direct: enPos, value: enAvoidState): boolean {" line710="" line711="        let temp2: boolean = false;" line712="        pins.digitalWritePin(DigitalPin.P9, 0);" line713="        switch (value) {" line714="            case enAvoidState.OBSTACLE: {" line715="                if (pins.analogReadPin(AnalogPin.P3) &lt; 800) {" line716="                " line717="                    temp2 = true;" line718="                    setPwm(8, 0, 0);" line719="                }" line720="                else {                 " line721="                    temp2 = false;" line722="                    setPwm(8, 0, 4095);" line723="                }" line724="                break;" line725="            }" line726="" line727="            case enAvoidState.NOOBSTACLE: {" line728="                if (pins.analogReadPin(AnalogPin.P3) &gt; 800) {" line729="" line730="                    temp2 = true;" line731="                    setPwm(8, 0, 4095);" line732="                }" line733="                else {" line734="                    temp2 = false;" line735="                    setPwm(8, 0, 0);" line736="                }" line737="                break;" line738="            }" line739="        }" line740="        pins.digitalWritePin(DigitalPin.P9, 1);" line741="        return temp2;" line742="" line743="    }" line744="" line745="" line746="}" numlines="747"></mutation></block></statement></block><block type="device_forever" id="@1cUg,/Yq7abUCnj$=}4" x="1257" y="20"/></xml>